<%- include('../partials/admin/header') %>

    <div class="container my-4">
        <div class="d-flex justify-content-between align-items-center mb-3">
            <h2 class="text-primary">Sales Report</h2>
            <div class="export-buttons">
                <button class="btn btn-primary me-2" onclick="exportToPDF()">
                    <i class="material-icons md-file_download"></i> Export PDF
                </button>
                <button class="btn btn-success" onclick="exportToExcel()">
                    <i class="material-icons md-file_download"></i> Export Excel
                </button>
            </div>
        </div>

        <div id="pdfPreviewModal" class="modal" tabindex="-1" role="dialog">
            <div class="modal-dialog modal-lg" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">PDF Preview</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <canvas id="pdfCanvas"></canvas> <!-- Canvas for PDF rendering -->
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-primary" onclick="downloadPDF()">Download PDF</button>
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Date Filter Options -->
        <div class="d-flex justify-content-between align-items-center mb-4 flex-wrap gap-3">
            <select class="form-select w-auto" name="dateRange" id="dateRangeSelect" aria-label="Select Date Range">
                <option value="">Select Date Range</option>
                <option value="today">Today</option>
                <option value="week">This Week</option>
                <option value="month">This Month</option>
                <option value="year">This Year</option>
            </select>

            <form class="d-flex align-items-center gap-2">
                <label for="startDate" class="form-label me-2">Start Date:</label>
                <input type="date" id="startDate" name="startDate" class="form-control w-auto">
                <label for="endDate" class="form-label me-2">End Date:</label>
                <input type="date" id="endDate" name="endDate" class="form-control w-auto">
            </form>
        </div>

        <!-- Summary Cards -->
        <div class="row mb-4">
            <div class="col-lg-3 col-md-6">
                <div class="card shadow-sm text-center">
                    <div class="card-body">
                        <h6 class="text-muted">Total Sales</h6>
                        <h3 class="text-primary"></h3>
                    </div>
                </div>
            </div>
            <div class="col-lg-3 col-md-6">
                <div class="card shadow-sm text-center">
                    <div class="card-body">
                        <h6 class="text-muted">Total Orders</h6>
                        <h3 class="text-success">
                            <%= count %>
                        </h3>
                    </div>
                </div>
            </div>
            <div class="col-lg-3 col-md-6">
                <div class="card shadow-sm text-center">
                    <div class="card-body">
                        <h6 class="text-muted">Total Discount</h6>
                        <h3 class="text-warning"></h3>
                    </div>
                </div>
            </div>
            <div class="col-lg-3 col-md-6">
                <div class="card shadow-sm text-center">
                    <div class="card-body">
                        <h6 class="text-muted">Total Customers</h6>
                        <h3 class="text-info"></h3>
                    </div>
                </div>
            </div>
        </div>

        <!-- Sales Report Table -->
        <div class="table-responsive shadow-sm">
            <table class="table table-hover align-middle text-center" id="salesTable">
                <thead class="table-primary text-uppercase">
                    <tr>
                        <th>Sl No</th>
                        <th>User Name</th>
                        <th>Email</th>
                        <th>Products</th>
                        <th>Quantity</th>
                        <th>Date</th>
                        <th>Total Price</th>
                        <th>Coupon Code</th>
                        <th>Coupon Amount</th>
                        <th>Final Amount</th>
                        <th>Payment Method</th>
                        <th>Status</th>
                    </tr>
                </thead>
                <tbody>
                    <% let k=1; %>
                        <% for (let i=orders.length - 1; i>= 0; i--) { %>
                            <tr>
                                <td>
                                    <%= k++ %>
                                </td>
                                <td data-customer-id="<%= orders[i].user%>">
                                    <%= orders[i].user.username %>
                                </td>

                                <td>
                                    <%= orders[i].user.email %>
                                </td>
                                <td>
                                    <ul>
                                        <% orders[i].orderedItems.forEach(item=> { %>
                                            <li>
                                                <%= item.product.productName %>
                                            </li>
                                            <% }) %>
                                    </ul>
                                </td>
                                <td>
                                    <ul>
                                        <% orders[i].orderedItems.forEach(item=> { %>
                                            <li>
                                                <%= item.quantity %>
                                            </li>
                                            <% }) %>
                                    </ul>
                                </td>
                                <td>
                                    <%= orders[i].createdOn.toLocaleDateString() %>
                                </td>
                                <td>₹<%= orders[i].totalPrice.toLocaleString() %>
                                </td>
                                <td>
                                    <%= orders[i].couponCode %>
                                </td>
                                <td>₹<%= orders[i].discount.toLocaleString() %>
                                </td>
                                <td>₹<%= orders[i].finalAmount.toLocaleString() %>
                                </td>
                                <td>
                                    <%= orders[i].paymentMethod %>
                                </td>
                                <td>
                                    <%= orders[i].status %>
                                </td>
                            </tr>
                            <% } %>
                </tbody>
            </table>
        </div>
        <div class="pagination-area my-4">
            <nav>
                <ul class="pagination justify-content-center">
                    <% for(let i=1;i<=totalPages;i++){ %>
                        <li class="page-item <%= (i===page) ? 'active' : '' %>">
                            <a class="page-link" style="z-index: 100;" href="?page=<%= i %>">
                                <%= i %>
                            </a>


                        </li>
                        <% } %>
                </ul>
            </nav>
        </div>
    </div>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.10.377/pdf.min.js"></script>


    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.13/jspdf.plugin.autotable.min.js"></script>
    <script>
        async function previewPDF() {
            const { jsPDF } = window.jspdf;
            const doc = new jsPDF('p', 'pt', 'a4');

            const logoURL = '/zoul-frontend/assets/imgs/theme/logo.png';
            doc.addImage(logoURL, 'PNG', 15, 10, 40, 40);
            doc.setFontSize(16);
            doc.text('Sales Report', 70, 30);
            doc.setFontSize(10);
            doc.text(`Generated on: ${new Date().toLocaleDateString()}`, 70, 45);

            doc.autoTable({
                html: '#salesTable',
                startY: 60,
                theme: 'grid',
                headStyles: { fillColor: [41, 128, 185], textColor: [255, 255, 255], fontSize: 8 },
                bodyStyles: { fontSize: 8, cellPadding: 3, minCellWidth: 45 },
                styles: { overflow: 'linebreak', valign: 'middle', halign: 'center' },
                columnStyles: {
                    0: { cellWidth: 30, halign: 'center' },
                    1: { cellWidth: 50, halign: 'left' },
                    2: { cellWidth: 40, halign: 'left' },
                    3: { cellWidth: 40, halign: 'center' },
                    4: { cellWidth: 40, halign: 'center' },
                    5: { cellWidth: 40, halign: 'right' },
                    6: { cellWidth: 40, halign: 'center' },
                    7: { cellWidth: 40, halign: 'center' },
                    8: { cellWidth: 40, halign: 'center' },
                    9: { cellWidth: 40, halign: 'center' },
                    10: { cellWidth: 40, halign: 'center' },
                    11: { cellWidth: 40, halign: 'center' }
                },
                didParseCell: function (data) {
                    if (!data.cell.text || data.cell.text.length === 0) {
                        data.cell.text = '-';
                        return;
                    }
                 
                },

                willDrawCell: function (data) {
                    if (data.cell.text.length > 20) {
                        data.cell.styles.fontSize = 4;
                    }
                }
            });

            const pdfBlob = doc.output('blob');
            showPDFPreview(pdfBlob);
        }
        async function showPDFPreview(pdfBlob) {
            try {
                const pdfCanvas = document.getElementById('pdfCanvas');
                const pdfCtx = pdfCanvas.getContext('2d');

                const pdfData = await pdfBlob.arrayBuffer();
                const pdfDocument = await pdfjsLib.getDocument({ data: pdfData }).promise;
                const page = await pdfDocument.getPage(1);

                const viewport = page.getViewport({ scale: 1.3 });
                pdfCanvas.width = viewport.width;
                pdfCanvas.height = viewport.height;

                await page.render({
                    canvasContext: pdfCtx,
                    viewport: viewport,
                }).promise;

                $('#pdfPreviewModal').modal('show');
            } catch (error) {
                console.error('Error showing PDF preview:', error);
                alert('Failed to load PDF preview. Please try again.');
            }
        }


        function downloadPDF() {
            const { jsPDF } = window.jspdf;
            const doc = new jsPDF('p', 'pt', 'a4');
            doc.save('sales-report.pdf');
        }

        function exportToPDF() {
            const { jsPDF } = window.jspdf;
            const doc = new jsPDF('p', 'pt', 'a4');
            const logoURL = '/evara-frontend/assets/imgs/theme/logo.png';
            doc.addImage(logoURL, 'PNG', 15, 10, 40, 40);
            doc.setFontSize(16);
            doc.text('Sales Report', 70, 30);
            doc.setFontSize(10);
            doc.text(`Generated on: ${new Date().toLocaleDateString()}`, 70, 45);

            const rupeeSymbol = '₹';
            doc.setFont('CustomFont', 'normal');

            doc.autoTable({
                html: '#salesTable',
                startY: 60,
                theme: 'grid',
                headStyles: { fillColor: [41, 128, 185], textColor: [255, 255, 255], fontSize: 8 },
                bodyStyles: { fontSize: 6, cellPadding: 3, minCellWidth: 50 },
                styles: { overflow: 'linebreak', valign: 'middle', halign: 'center' },
                columnStyles: {
                    0: { cellWidth: 30, halign: 'center' },
                    1: { cellWidth: 50, halign: 'left' },
                    2: { cellWidth: 40, halign: 'left' },
                    3: { cellWidth: 40, halign: 'center' },
                    4: { cellWidth: 40, halign: 'center' },
                    5: { cellWidth: 40, halign: 'right' },
                    6: { cellWidth: 40, halign: 'center' },
                    7: { cellWidth: 40, halign: 'center' },
                    8: { cellWidth: 40, halign: 'center' },
                    9: { cellWidth: 40, halign: 'center' },
                    10: { cellWidth: 40, halign: 'center' },
                    11: { cellWidth: 40, halign: 'center' }
                },
                didParseCell: function (data) {
                    if (data.cell.text === undefined || data.cell.text === null) {
                        data.cell.text = '';
                    }

                },
                willDrawCell: function (data) {
                    if (data.cell.text.length > 20) {
                        data.cell.styles.fontSize = 5;
                    }
                }
            });

            // Save the PDF
            doc.save('sales-report.pdf');
        }

        function exportToExcel() {
            const table = document.getElementById('salesTable');
            const wb = XLSX.utils.table_to_book(table, { sheet: "Sales Report" });
            XLSX.writeFile(wb, 'sales-report.xlsx');
        }

        function initializeDateFilter() {
            const startDateInput = document.getElementById('startDate');
            const endDateInput = document.getElementById('endDate');
            const table = document.getElementById('salesTable');
            const tbody = table.getElementsByTagName('tbody')[0];
            const rows = tbody.getElementsByTagName('tr');
            const dateRangeSelect = document.getElementById('dateRangeSelect');

            function parseDate(dateStr) {
                const [day, month, year] = dateStr.split('/').map(Number);
                return new Date(year, month - 1, day);
            }

            function formatCurrency(amount) {
                return amount.toLocaleString('en-IN', {
                    style: 'currency',
                    currency: 'INR',
                    minimumFractionDigits: 0,
                    maximumFractionDigits: 0
                }).replace('₹', 'INR');
            }

            function filterTable() {
                const startDate = startDateInput.value ? new Date(startDateInput.value) : null;
                const endDate = endDateInput.value ? new Date(endDateInput.value) : null;

                if (startDate) startDate.setHours(0, 0, 0, 0);
                if (endDate) endDate.setHours(23, 59, 59, 999);

                let visibleRows = 0;
                let totalSales = 0;
                let totalDiscount = 0;
                const uniqueCustomers = new Set();

                // Loop through each row to filter by date and sum values
                for (const row of rows) {
                    const dateCell = row.cells[5].textContent.trim();
                    const rowDate = parseDate(dateCell);

                    // Skip if no date or outside of range
                    if (!rowDate) continue;

                    let showRow = true;
                    if (startDate && rowDate < startDate) showRow = false;
                    if (endDate && rowDate > endDate) showRow = false;

                    // Show or hide row based on date filter
                    row.style.display = showRow ? '' : 'none';

                    // Aggregate only if the row is within the date range
                    if (showRow) {
                        visibleRows++;

                        // Parse and accumulate final amount and discount values
                        const finalAmount = parseFloat(row.cells[9].textContent.replace(/[₹,]/g, '')) || 0;
                        const discount = parseFloat(row.cells[8].textContent.replace(/[₹,]/g, '')) || 0;

                        totalSales += finalAmount;
                        totalDiscount += discount;

                        // Use a unique customer identifier for counting
                        const customerId = row.cells[1].getAttribute('data-customer-id');
                        if (customerId) uniqueCustomers.add(customerId);
                    }
                }

                // Format the total sales and discount as currency
                const formatCurrency = (amount) => {
                    return amount.toLocaleString('en-IN', {
                        style: 'currency',
                        currency: 'INR',
                        minimumFractionDigits: 0,
                        maximumFractionDigits: 0
                    }).replace('INR', '₹');
                };

                const summaryCards = document.querySelectorAll('.card .card-body');
                summaryCards.forEach(card => {
                    const title = card.querySelector('h6').textContent.trim();
                    const valueSpan = card.querySelector('h3');

                    switch (title) {
                        case 'Total Sales':
                            valueSpan.textContent = formatCurrency(totalSales);
                            break;
                        case 'Total Orders':
                            valueSpan.textContent = visibleRows;
                            break;
                        case 'Total Discount':
                            valueSpan.textContent = formatCurrency(totalDiscount);
                            break;
                        case 'Total Customers':
                            valueSpan.textContent = uniqueCustomers.size;
                            break;
                    }
                });
            }


            function handleDateRangeSelection(e) {
                e.preventDefault();

                const today = new Date();


                const startDate = new Date(today);

                switch (this.value) {
                    case 'today':
                        startDateInput.value = today.toISOString().split('T')[0];
                        endDateInput.value = today.toISOString().split('T')[0];
                        break;
                    case 'week':
                        startDate.setDate(today.getDate() - 7);
                        startDateInput.value = startDate.toISOString().split('T')[0];
                        endDateInput.value = today.toISOString().split('T')[0];
                        break;
                    case 'month':
                        startDate.setMonth(today.getMonth() - 1);
                        startDateInput.value = startDate.toISOString().split('T')[0];
                        endDateInput.value = today.toISOString().split('T')[0];
                        break;
                    case 'year':
                        startDate.setFullYear(today.getFullYear() - 1);
                        startDateInput.value = startDate.toISOString().split('T')[0];
                        endDateInput.value = today.toISOString().split('T')[0];
                        break;
                    default:
                        startDateInput.value = '';
                        endDateInput.value = '';
                        break;
                }
                filterTable();
            }

            dateRangeSelect.addEventListener('change', handleDateRangeSelection);
            startDateInput.addEventListener('change', filterTable);
            endDateInput.addEventListener('change', filterTable);

            filterTable();
        }

        document.addEventListener('DOMContentLoaded', initializeDateFilter);
    </script>


    <%- include('../partials/admin/footer') %>